Create some tests (at least one per function) that you want your Binary Search Tree (BST) to pass before you start coding.

Implement a binary search tree that includes:

nodes to store values, an add function that adds a new value in the appropriate location based on our ordering rules,
a remove function that finds and removes a value and then picks an appropriate replacement node

we have at least one tree traversal function (I recommend starting with an in-order traversal!)

Analyze and compare the complexity of insert and search as compared to a binary tree without any order in its nodes.

Once you have implemented and tested your code, add to the README file what line(s) of code or inputs and outputs show your work meeting each of the above requirements.

When my tree is empty O(1), otherwise it is mostly O(n) for search and insertion complexity. 